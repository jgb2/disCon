data
plot1
plot1 <- data %>%
filter(phase == 'test') %>%
group_by(distribution, subid)
plot1
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(ggplot2)
library(jsonlite)
library(tidyr)
library(stringr)
library(dplyr)
library(ggthemes)
library(langcog)
data
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(ggplot2)
library(jsonlite)
library(tidyr)
library(stringr)
library(dplyr)
library(ggthemes)
library(langcog)
raw_data <- data_frame()
files <- dir("../kids_simple/")
raw_data <- data_frame()
for (f in files) {
jf <- paste("../data/kids_simple/",f,sep="")
jd <- fromJSON(paste(readLines(jf), collapse=""))
id <- as_data_frame(jd$data$data)
raw_data <- bind_rows(raw_data, id)
}
data <- raw_data %>%
mutate(distribution = as.character(distribution),
distribution = factor(distribution, levels = c("c(6, 0, 0)", "c(4, 2, 0)", "c(2, 2, 2)")))
data
data <- raw_data %>%
mutate(distribution = as.character(distribution),
distribution = factor(distribution, levels = c("c(6, 0, 0)", "c(4, 2, 0)", "c(2, 2, 2)")))
data
files <- dir("../kids_simple/")
w
w
raw_data <- data_frame()
for (f in files) {
jf <- paste("../data/kids_simple/",f,sep="")
jd <- fromJSON(paste(readLines(jf), collapse=""))
id <- as_data_frame(jd$data$data)
raw_data <- bind_rows(raw_data, id)
}
data <- raw_data %>%
mutate(distribution = as.character(distribution),
distribution = factor(distribution, levels = c("c(6, 0, 0)", "c(4, 2, 0)", "c(2, 2, 2)")))
raw_data
files <- dir("../kids_simple/")
raw_data <- data_frame()
for (f in files) {
jf <- paste("../data/kids_simple/",f,sep="")
jd <- fromJSON(paste(readLines(jf), collapse=""))
id <- as_data_frame(jd$data$data)
raw_data <- bind_rows(raw_data, id)
}
raw_data
files <- dir("../../kids_simple/")
raw_data <- data_frame()
for (f in files) {
jf <- paste("../../kids_simple/",f,sep="")
jd <- fromJSON(paste(readLines(jf), collapse=""))
id <- as_data_frame(jd$data$data)
raw_data <- bind_rows(raw_data, id)
}
data <- raw_data %>%
mutate(distribution = as.character(distribution),
distribution = factor(distribution, levels = c("c(6, 0, 0)", "c(4, 2, 0)", "c(2, 2, 2)")))
data
data <- data %>%
filter(subid != "", subid != "test", subid != "Test")
data %>%
filter(phase == 'training') %>%
group_by(subid) %>%
summarise(correct = mean(correct_item))
drop <- data %>%
filter(phase == 'training') %>%
group_by(subid) %>%
summarise(correct = mean(correct_item)) %>%
filter(correct < 0.83) %>%
pull(subid)
data <- data %>%
filter(!subid %in% drop)
data
data <- data %>%
filter(subid != "", subid != "test", subid != "Test")
data
data <- raw_data %>%
mutate(distribution = as.character(distribution),
distribution = factor(distribution, levels = c("c(6, 0, 0)", "c(4, 2, 0)", "c(2, 2, 2)")))
data %>%
filter(phase == 'training') %>%
group_by(subid) %>%
summarise(correct = mean(correct_item))
drop <- data %>%
filter(phase == 'training') %>%
group_by(subid) %>%
summarise(correct = mean(correct_item)) %>%
filter(correct < 0.83) %>%
pull(subid)
data <- data %>%
filter(!subid %in% drop)
data
plot1 <- data %>%
filter(phase == 'test') %>%
group_by(distribution, subid) %>%
summarise(correct = mean(correct_target1),
correct2 = mean(correct_target2),
correct3 = mean(correct_target3)) %>%
gather(item, prop_correct, -distribution, -subid) %>%
group_by(distribution, item) %>%
multi_boot_standard(col = "prop_correct")
plot1 <- data %>%
filter(phase == 'test') %>%
group_by(distribution, subid) %>%
summarise(correct = mean(correct_target1),
correct2 = mean(correct_target2),
correct3 = mean(correct_target3)) %>%
gather(item, prop_correct, -distribution, -subid) %>%
group_by(distribution, item) %>%
multi_boot_standard(col = "prop_correct")
ggplot(plot1,
aes(x = item, y=mean, fill=item)) +
geom_bar(stat='identity') +
geom_linerange(aes(ymin = ci_lower, ymax = ci_upper)) +
scale_fill_solarized(name = "Chosen item",
breaks = c("correct", "correct2", "correct3"),
labels = c("most frequent", "second most frequent", "least frequent"))+
facet_grid(~distribution,
labeller = as_labeller(c(`c(6, 0, 0)` = "Distribution\n(6-0-0)", `c(4, 2, 0)` = "Distribution\n(4-2-0)", `c(2, 2, 2)` = "Distribution\n(2-2-2)", preference = "preference", statistical = "statistical"))) +
geom_hline(yintercept = 1/3, lty=2) +
ylim(0, 1) +
theme_few() +
theme(axis.text.x = element_blank(), axis.ticks.x = element_blank()) +
labs(x="", y= "proportion chosen")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(ggplot2)
library(jsonlite)
library(tidyr)
library(stringr)
library(dplyr)
library(ggthemes)
library(langcog)
i
files <- dir("../../adult_raw_data/sandbox-results")
raw_data <- data_frame()
raw_data <- data_frame()
for (f in files) {
jf <- paste("../../adult_raw_data/sandbox-results",f,sep="")
jd <- fromJSON(paste(readLines(jf), collapse=""))
id <- as_data_frame(jd$answers$data$data) %>%
mutate(workerid = jd$WorkerId)
raw_data <- bind_rows(raw_data, id)
}
files <- dir("../../adult_raw_data/sandbox-results/")
raw_data <- data_frame()
for (f in files) {
jf <- paste("../../adult_raw_data/sandbox-results/",f,sep="")
jd <- fromJSON(paste(readLines(jf), collapse=""))
id <- as_data_frame(jd$answers$data$data) %>%
mutate(workerid = jd$WorkerId)
raw_data <- bind_rows(raw_data, id)
}
data <- raw_data %>%
mutate(distribution = as.character(distribution),
distribution = factor(distribution, levels = c("c(6, 0, 0)", "c(4, 2, 0)", "c(2, 2, 2)")))
data
files <- dir("../../adult_relative_raw_data/sandbox-results/")
raw_data <- data_frame()
for (f in files) {
jf <- paste("../../adult_relative_raw_data/sandbox-results/",f,sep="")
jd <- fromJSON(paste(readLines(jf), collapse=""))
id <- as_data_frame(jd$answers$data$data) %>%
mutate(workerid = jd$WorkerId)
raw_data <- bind_rows(raw_data, id)
}
data <- raw_data %>%
mutate(distribution = as.character(distribution),
distribution = factor(distribution, levels = c("c(6, 0, 0)", "c(4, 2, 0)", "c(2, 2, 2)")))
data
data <- raw_data %>%
mutate(distribution = as.character(distribution),
distribution = factor(distribution, levels = c("c(6, 0, 0)", "c(4, 2, 0)", "c(2, 2, 2)", "c(3, 0, 0)", "c(2, 1, 0)", "c(1, 1, 1)")))
data
raw_data
raw_data <- data_frame()
for (f in files) {
jf <- paste("../../adult_relative_raw_data/sandbox-results/",f,sep="")
jd <- fromJSON(paste(readLines(jf), collapse=""))
id <- as_data_frame(jd$answers$data$data) %>%
mutate(workerid = jd$WorkerId)
raw_data <- bind_rows(raw_data, id)
}
data <- raw_data %>%
mutate(distribution = as.character(distribution),
distribution = factor(distribution, levels = c("c(6, 0, 0)", "c(4, 2, 0)", "c(2, 2, 2)", "c(3, 0, 0)", "c(2, 1, 0)", "c(1, 1, 1)")))
files <- dir("../../adult_relative_raw_data/sandbox-results/")
raw_data <- data_frame()
for (f in files) {
jf <- paste("../../adult_relative_raw_data/sandbox-results/",f,sep="")
jd <- fromJSON(paste(readLines(jf), collapse=""))
id <- as_data_frame(jd$answers$data$data) %>%
mutate(workerid = jd$WorkerId)
raw_data <- bind_rows(raw_data, id)
}
data <- raw_data %>%
mutate(distribution = as.character(distribution),
distribution = factor(distribution, levels = c("c(6, 0, 0)", "c(4, 2, 0)", "c(2, 2, 2)", "c(3, 0, 0)", "c(2, 1, 0)", "c(1, 1, 1)")))
# data <- read_csv(file="../data/pilot.data.csv")
data
data <- raw_data %>%
mutate(distribution = as.character(distribution),
distribution = factor(distribution, levels = c("c(3, 0, 0)", "c(2, 1, 0)", "c(1, 1, 1)")))
data
data <- raw_data %>%
mutate(distribution = as.character(distribution),
distribution = factor(distribution, levels = c("c(6, 0, 0)", "c(4, 2, 0)", "c(2, 2, 2)", "c(3, 0, 0)" "c(1, 1, 1)")))
data <- raw_data %>%
mutate(distribution = as.character(distribution),
distribution = factor(distribution, levels = c("c(6, 0, 0)", "c(4, 2, 0)", "c(2, 2, 2)", "c(3, 0, 0)", "c(1, 1, 1)")))
data
data <- raw_data %>%
mutate(distribution = as.character(distribution),
distribution = factor(distribution, levels = c("c(6, 0, 0)", "c(4, 2, 0)", "c(2, 2, 2)", "c(3, 0, 0)", "c(1, 1, 1)", "c(2, 1, 0)")))
data
files <- dir("../../adult_relative_raw_data/sandbox-results/")
raw_data <- data_frame()
for (f in files) {
jf <- paste("../../adult_relative_raw_data/sandbox-results/",f,sep="")
jd <- fromJSON(paste(readLines(jf), collapse=""))
id <- as_data_frame(jd$answers$data$data) %>%
mutate(workerid = jd$WorkerId)
raw_data <- bind_rows(raw_data, id)
}
data <- raw_data %>%
mutate(distribution = as.character(distribution),
distribution = factor(distribution, levels = c("c(6, 0, 0)", "c(4, 2, 0)", "c(2, 2, 2)", "c(3, 0, 0)", "c(1, 1, 1)", "c(2, 1, 0)")))
data
files <- dir("../../adult_relative_raw_data/sandbox-results/")
raw_data <- data_frame()
for (f in files) {
jf <- paste("../../adult_relative_raw_data/sandbox-results/",f,sep="")
jd <- fromJSON(paste(readLines(jf), collapse=""))
id <- as_data_frame(jd$answers$data$data) %>%
mutate(workerid = jd$WorkerId)
raw_data <- bind_rows(raw_data, id)
}
data <- raw_data %>%
mutate(distribution = as.character(distribution),
distribution = factor(distribution, levels = c("c(6, 0, 0)", "c(4, 2, 0)", "c(2, 2, 2)", "c(3, 0, 0)", "c(1, 1, 1)", "c(2, 1, 0)")))
data
raw_data
data <- raw_data %>%
mutate(distribution = as.character(distribution))
data
raw_data
View(raw_data)
unlist(raw_data[1, 5])
unlist(raw_data[1, 6])
unlist(raw_data[5, 6])
data <- raw_data %>%
mutate(distribution = as.vector(distribution)),
data <- raw_data %>%
mutate(distribution = as.vector(distribution),
distribution = factor(distribution, levels = c("c(6, 0, 0)", "c(4, 2, 0)", "c(2, 2, 2)", "c(3, 0, 0)", "c(1, 1, 1)", "c(2, 1, 0)")))
data
data <- raw_data %>%
mutate(distribution = as.character.default(distribution),
distribution = factor(distribution, levels = c("c(6, 0, 0)", "c(4, 2, 0)", "c(2, 2, 2)", "c(3, 0, 0)", "c(1, 1, 1)", "c(2, 1, 0)")))
data
?ifelse
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(ggplot2)
library(jsonlite)
library(tidyr)
library(stringr)
library(dplyr)
library(ggthemes)
library(langcog)
data <- raw_data %>%
mutate(distribution = as.character(distribution),
ifelse(distribution == "2:0", "c(2, 1, 0)")
distribution = factor(distribution, levels = c("c(6, 0, 0)", "c(4, 2, 0)", "c(2, 2, 2)", "c(3, 0, 0)", "c(1, 1, 1)", "c(2, 1, 0)")))
data <- raw_data %>%
mutate(distribution = as.character(distribution),
ifelse(distribution == "2:0", "c(2, 1, 0)"),
distribution = factor(distribution, levels = c("c(6, 0, 0)", "c(4, 2, 0)", "c(2, 2, 2)", "c(3, 0, 0)", "c(1, 1, 1)", "c(2, 1, 0)")))
data <- raw_data %>%
mutate(distribution = as.character(distribution),
ifelse(distribution == "2:0", "c(2, 1, 0)", distribution),
distribution = factor(distribution, levels = c("c(6, 0, 0)", "c(4, 2, 0)", "c(2, 2, 2)", "c(3, 0, 0)", "c(1, 1, 1)", "c(2, 1, 0)")))
data
data <- raw_data %>%
mutate(distribution = as.character(distribution),
ifelse(distribution == "2:0", "c(2, 1, 0)", distribution)
data
data <- raw_data %>%
mutate(distribution = as.character(distribution),
ifelse(distribution == "2:0", "c(2, 1, 0)", distribution)),
data <- raw_data %>%
mutate(distribution = as.character(distribution),
ifelse(distribution == "2:0", "c(2, 1, 0)", distribution))
data
data <- raw_data %>%
mutate(distribution = as.character(distribution),
ifelse(distribution == "2:0", distribution = "c(2, 1, 0)", distribution))
data <- raw_data %>%
mutate(distribution = as.character(distribution),
ifelse(distribution == "2:0", "c(2, 1, 0)", distribution))
data
data <- raw_data %>%
mutate(distribution = as.character(distribution)) %>%
ifelse(distribution == "2:0", "c(2, 1, 0)", distribution))
data <- raw_data %>%
mutate(distribution = as.character(distribution)) %>%
ifelse(distribution == "2:0", "c(2, 1, 0)", distribution)
data <- raw_data %>%
mutate(distribution = as.character(distribution)) %>%
ifelse(distribution == "2:0", "c(2, 1, 0)", NA)
data <- raw_data %>%
mutate(distribution = as.character(distribution)) %>%
distribution = ifelse(distribution == "2:0", "c(2, 1, 0)", distribution)
data <- raw_data %>%
mutate(distribution = as.character(distribution))
distribution = ifelse(distribution == "2:0", "c(2, 1, 0)", distribution))
data <- raw_data %>%
mutate(distribution = as.character(distribution),
distribution = ifelse(distribution == "2:0", "c(2, 1, 0)", distribution))
data
data <- raw_data %>%
mutate(distribution = as.character(distribution),
distribution = ifelse(distribution == "2:0", "c(2, 1, 0)", distribution)),
data <- raw_data %>%
mutate(distribution = as.character(distribution),
distribution = ifelse(distribution == "2:0", "c(2, 1, 0)", distribution),
distribution = factor(distribution, levels = c("c(6, 0, 0)", "c(4, 2, 0)", "c(2, 2, 2)", "c(3, 0, 0)", "c(1, 1, 1)", "c(2, 1, 0)")))
data
data %>%
filter(phase == 'training') %>%
group_by(workerid) %>%
summarise(correct = mean(correct_item))
drop <- data %>%
filter(phase == 'training') %>%
group_by(workerid) %>%
summarise(correct = mean(correct_item)) %>%
filter(correct < 0.83) %>%
pull(workerid)
data <- data %>%
filter(!workerid %in% drop)
plot1 <- data %>%
filter(phase == "test", distribution == "c(6, 0, 0)") %>%
group_by(distribution, target1) %>%
summarise(correct = mean(correct_target1),
correct2 = mean(correct_target2),
correct3 = mean(correct_target3))
plot1 <- data %>%
filter(phase == "test", distribution == "c(6, 0, 0)", target1 == "vehicles")
plot1 <- data %>%
filter(phase == 'test') %>%
group_by(distribution, workerid, target1) %>%
summarise(correct = mean(correct_target1),
correct2 = mean(correct_target2),
correct3 = mean(correct_target3)) %>%
gather(item, prop_correct, -distribution, -workerid, -target1) %>%
group_by(distribution, item, target1) %>%
multi_boot_standard(col = "prop_correct")
ggplot(plot1,
aes(x = item, y=mean, fill=item)) +
geom_bar(stat='identity') +
geom_linerange(aes(ymin = ci_lower, ymax = ci_upper)) +
scale_fill_solarized(name = "Chosen item",
breaks = c("correct", "correct2", "correct3"),
labels = c("most frequent", "second most frequent", "least frequent"))+
facet_grid(target1~distribution) +
geom_hline(yintercept = 1/3, lty=2) +
ylim(0, 1) +
theme_few() +
theme(axis.text.x = element_blank(), axis.ticks.x = element_blank()) +
labs(x="", y= "proportion chosen")
plot1 <- data %>%
filter(phase == 'test') %>%
group_by(distribution, workerid) %>%
summarise(correct = mean(correct_target1),
correct2 = mean(correct_target2),
correct3 = mean(correct_target3)) %>%
gather(item, prop_correct, -distribution, -workerid) %>%
group_by(distribution, item) %>%
multi_boot_standard(col = "prop_correct")
ggplot(plot1,
aes(x = item, y=mean, fill=item)) +
geom_bar(stat='identity') +
geom_linerange(aes(ymin = ci_lower, ymax = ci_upper)) +
scale_fill_solarized(name = "Chosen item",
breaks = c("correct", "correct2", "correct3"),
labels = c("most frequent", "second most frequent", "least frequent"))+
facet_grid(~distribution,
labeller = as_labeller(c(`c(5, 1, 0)` = "Distribution\n(5-1-0)", `c(4, 2, 0)` = "Distribution\n(4-2-0)", `c(2, 2, 2)` = "Distribution\n(2-2-2)", preference = "preference", statistical = "statistical"))) +
geom_hline(yintercept = 1/3, lty=2) +
ylim(0, 1) +
theme_few() +
theme(axis.text.x = element_blank(), axis.ticks.x = element_blank()) +
labs(x="", y= "proportion chosen")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(ggplot2)
library(jsonlite)
library(tidyr)
library(stringr)
library(dplyr)
library(ggthemes)
library(langcog)
# Data pre-processing
files <- dir("../../adult_relative_raw_data/production-results/")
raw_data <- data_frame()
for (f in files) {
jf <- paste("../../adult_relative_raw_data/production-results/",f,sep="")
jd <- fromJSON(paste(readLines(jf), collapse=""))
id <- as_data_frame(jd$answers$data$data) %>%
mutate(workerid = jd$WorkerId)
raw_data <- bind_rows(raw_data, id)
}
data <- raw_data %>%
mutate(distribution = as.character(distribution),
distribution = ifelse(distribution == "2:0", "c(2, 1, 0)", distribution),
distribution = factor(distribution, levels = c("c(6, 0, 0)", "c(4, 2, 0)", "c(2, 2, 2)", "c(3, 0, 0)", "c(1, 1, 1)", "c(2, 1, 0)")))
# data <- raw_data %>%
#  mutate(correct_target3 = ifelse(correct_target1 == 0 & correct_target2 == 0, 1, 0)) %>%
#  mutate(distribution = as.character(distribution),
#         distribution = factor(distribution, levels = c("c(6, 0, 0)", "c(4, 2, 0)", "c(2, 2, 2)")),
#         pick = ifelse(pickPos == "item_l", item_l, ifelse(pickPos == "item_r", item_r, ifelse(pickPos=="item_m", item_m, NA))),
#         correct_item = ifelse(pick == correctItem, 1, 0),
#         pickTest = substr(pick, 4, length(pick)),
#         correct_target1 = ifelse(pickTest == target1, 1, 0),
#         correct_target2 = ifelse(pickTest == target2, 1, 0),
#         correct_target3 = ifelse(pickTest == target3, 1, 0))
# write.csv(data, file="../data/pilot.data.csv")
# data <- read_csv(file="../data/pilot.data.csv")
data
data %>%
filter(phase == 'training') %>%
group_by(workerid) %>%
summarise(correct = mean(correct_item))
drop <- data %>%
filter(phase == 'training') %>%
group_by(workerid) %>%
summarise(correct = mean(correct_item)) %>%
filter(correct < 0.83) %>%
pull(workerid)
data <- data %>%
filter(!workerid %in% drop)
data
drop <- data %>%
filter(phase == 'training') %>%
group_by(workerid) %>%
summarise(correct = mean(correct_item)) %>%
filter(correct < 0.83) %>%
pull(workerid)
data %>%
filter(phase == 'training') %>%
group_by(workerid) %>%
summarise(correct = mean(correct_item))
drop <- data %>%
filter(phase == 'training') %>%
group_by(workerid) %>%
summarise(correct = mean(correct_item)) %>%
filter(correct < 0.83) %>%
pull(workerid)
data <- data %>%
filter(!workerid %in% drop)
data
plot1 <- data %>%
filter(phase == 'test') %>%
group_by(distribution, workerid) %>%
summarise(correct = mean(correct_target1),
correct2 = mean(correct_target2),
correct3 = mean(correct_target3)) %>%
gather(item, prop_correct, -distribution, -workerid) %>%
group_by(distribution, item) %>%
multi_boot_standard(col = "prop_correct")
plot1 <- data %>%
filter(phase == 'test') %>%
group_by(distribution, workerid) %>%
summarise(correct = mean(correct_target1),
correct2 = mean(correct_target2),
correct3 = mean(correct_target3)) %>%
gather(item, prop_correct, -distribution, -workerid) %>%
group_by(distribution, item) %>%
multi_boot_standard(col = "prop_correct")
ggplot(plot1,
aes(x = item, y=mean, fill=item)) +
geom_bar(stat='identity') +
geom_linerange(aes(ymin = ci_lower, ymax = ci_upper)) +
scale_fill_solarized(name = "Chosen item",
breaks = c("correct", "correct2", "correct3"),
labels = c("most frequent", "second most frequent", "least frequent"))+
facet_grid(~distribution,
labeller = as_labeller(c(`c(5, 1, 0)` = "Distribution\n(5-1-0)", `c(4, 2, 0)` = "Distribution\n(4-2-0)", `c(2, 2, 2)` = "Distribution\n(2-2-2)", preference = "preference", statistical = "statistical"))) +
geom_hline(yintercept = 1/3, lty=2) +
ylim(0, 1) +
theme_few() +
theme(axis.text.x = element_blank(), axis.ticks.x = element_blank()) +
labs(x="", y= "proportion chosen")
