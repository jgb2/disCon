group_by (distribution, trackLast) %>%
summarise (lastInput = mean(same_lastInput)) %>%
multi_boot_standard(col = "lastInput")
plot2
plot2 <- data %>%
filter(phase == "test", distribution != "c(6, 0, 0)") %>%
mutate(trackLast = ifelse(lastInputCat == target1, "yes", "no")) %>%
group_by (distribution, trackLast) %>%
summarise (lastInput = mean(same_lastInput))
plot2
plot2 <- data %>%
filter(phase == "test", distribution != "c(6, 0, 0)") %>%
mutate(trackLast = ifelse(lastInputCat == target1, "yes", "no")) %>%
group_by (distribution, trackLast) %>%
summarise (lastInput = mean(same_lastInput),
n = n()) %>%
multi_boot_standard(col = "lastInput")
plot2 <- data %>%
filter(phase == "test", distribution != "c(6, 0, 0)") %>%
mutate(trackLast = ifelse(lastInputCat == target1, "yes", "no")) %>%
group_by (distribution, trackLast) %>%
summarise (lastInput = mean(same_lastInput),
n = n())
plot2
plot2 <- data %>%
filter(phase == "test", distribution != "c(6, 0, 0)") %>%
mutate(trackLast = ifelse(lastInputCat == target1, "yes", "no")) %>%
group_by (distribution, workerid) %>%
summarise (lastInput = mean(same_lastInput),
n = n()) %>%
multi_boot_standard(col = "lastInput")
ggplot(plot2,
aes(x = distribution, y = mean, fill = distribution)) +
geom_bar(stat='identity', width = 0.3) +
geom_linerange(aes(ymin = ci_lower, ymax = ci_upper)) +
geom_hline(yintercept = 1/3, lty=2) +
ylim(0, 1) +
theme_few()
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(ggplot2)
library(jsonlite)
library(tidyr)
library(stringr)
library(dplyr)
library(ggthemes)
library(langcog)
files <- dir("../../recency_raw_data/sandbox-results")
raw_data <- data_frame()
for (f in files) {
jf <- paste("../../recency_raw_data/sandbox-results/",f,sep="")
jd <- fromJSON(paste(readLines(jf), collapse=""))
id <- as_data_frame(jd$answers$data$data) %>%
mutate(workerid = jd$WorkerId)
raw_data <- bind_rows(raw_data, id)
}
data <- raw_data %>%
mutate(distribution = as.character(distribution),
distribution = factor(distribution, levels = c("c(6, 0, 0)", "c(4, 2, 0)", "c(2, 2, 2)")))
data
data_recency <- raw_data %>%
mutate(distribution = as.character(distribution),
distribution = factor(distribution, levels = c("c(6, 0, 0)", "c(4, 2, 0)", "c(2, 2, 2)")))
data_recency
data_recency <- raw_data %>%
mutate(distribution = as.character(distribution),
distribution = factor(distribution, levels = c("c(5, 1, 0)", "c(2, 2, 2)")))
data_recency
data <- raw_data %>%
mutate(distribution = as.character(distribution),
distribution = factor(distribution, levels = c("c(5, 1, 0)", "c(2, 2, 2)")))
data %>%
filter(phase == 'training') %>%
group_by(workerid) %>%
summarise(correct = mean(correct_item))
drop <- data %>%
filter(phase == 'training') %>%
group_by(workerid) %>%
summarise(correct = mean(correct_item)) %>%
filter(correct < 0.83) %>%
pull(workerid)
data <- data %>%
filter(!workerid %in% drop)
data
plot1 <- data %>%
filter(phase == 'test') %>%
group_by(distribution, workerid) %>%
summarise(correct = mean(correct_target1),
correct2 = mean(correct_target2),
correct3 = mean(correct_target3)) %>%
gather(item, prop_correct, -distribution, -workerid) %>%
group_by(distribution, item) %>%
multi_boot_standard(col = "prop_correct")
plot1 <- data %>%
filter(phase == 'test') %>%
group_by(distribution, workerid) %>%
summarise(correct = mean(correct_target1),
correct2 = mean(correct_target2),
correct3 = mean(correct_target3)) %>%
gather(item, prop_correct, -distribution, -workerid) %>%
group_by(distribution, item) %>%
multi_boot_standard(col = "prop_correct")
ggplot(plot1,
aes(x = item, y=mean, fill=item)) +
geom_bar(stat='identity') +
geom_linerange(aes(ymin = ci_lower, ymax = ci_upper)) +
scale_fill_solarized(name = "Chosen item",
breaks = c("correct", "correct2", "correct3"),
labels = c("most frequent", "second most frequent", "least frequent"))+
facet_grid(~distribution,
labeller = as_labeller(c(`c(6, 0, 0)` = "Distribution\n(6-0-0)", `c(4, 2, 0)` = "Distribution\n(4-2-0)", `c(2, 2, 2)` = "Distribution\n(2-2-2)", preference = "preference", statistical = "statistical"))) +
geom_hline(yintercept = 1/3, lty=2) +
ylim(0, 1) +
theme_few() +
theme(axis.text.x = element_blank(), axis.ticks.x = element_blank()) +
labs(x="", y= "proportion chosen")
ggplot(plot1,
aes(x = item, y=mean, fill=item)) +
geom_bar(stat='identity') +
geom_linerange(aes(ymin = ci_lower, ymax = ci_upper)) +
scale_fill_solarized(name = "Chosen item",
breaks = c("correct", "correct2", "correct3"),
labels = c("most frequent", "second most frequent", "least frequent"))+
facet_grid(~distribution,
labeller = as_labeller(c(`c(5, 1, 0)` = "Distribution\n(5-1-0)", `c(4, 2, 0)` = "Distribution\n(4-2-0)", `c(2, 2, 2)` = "Distribution\n(2-2-2)", preference = "preference", statistical = "statistical"))) +
geom_hline(yintercept = 1/3, lty=2) +
ylim(0, 1) +
theme_few() +
theme(axis.text.x = element_blank(), axis.ticks.x = element_blank()) +
labs(x="", y= "proportion chosen")
plot2 <- data %>%
filter(phase == "test", distribution != "c(6, 0, 0)") %>%
mutate(trackLast = ifelse(lastInputCat == target1, "yes", "no")) %>%
group_by (distribution, workerid) %>%
summarise (lastInput = mean(same_lastInput),
n = n()) %>%
multi_boot_standard(col = "lastInput")
plot2 <- data %>%
filter(phase == "test", distribution != "c(6, 0, 0)") %>%
mutate(trackLast = ifelse(lastInputCat == target1, "yes", "no")) %>%
group_by (distribution, workerid) %>%
summarise (lastInput = mean(same_lastInput),
n = n()) %>%
multi_boot_standard(col = "lastInput")
ggplot(plot2,
aes(x = distribution, y = mean, fill = distribution)) +
geom_bar(stat='identity', width = 0.3) +
geom_linerange(aes(ymin = ci_lower, ymax = ci_upper)) +
geom_hline(yintercept = 1/3, lty=2) +
ylim(0, 1) +
theme_few()
files <- dir("../../recency_raw_data/sandbox-results")
raw_data <- data_frame()
for (f in files) {
jf <- paste("../../recency_raw_data/sandbox-results/",f,sep="")
jd <- fromJSON(paste(readLines(jf), collapse=""))
id <- as_data_frame(jd$answers$data$data) %>%
mutate(workerid = jd$WorkerId)
raw_data <- bind_rows(raw_data, id)
}
data <- raw_data %>%
mutate(distribution = as.character(distribution),
distribution = factor(distribution, levels = c("c(5, 1, 0)", "c(2, 2, 2)")))
data
files <- dir("../../recency_raw_data/sandbox-results")
raw_data <- data_frame()
for (f in files) {
jf <- paste("../../recency_raw_data/sandbox-results/",f,sep="")
jd <- fromJSON(paste(readLines(jf), collapse=""))
id <- as_data_frame(jd$answers$data$data) %>%
mutate(workerid = jd$WorkerId)
raw_data <- bind_rows(raw_data, id)
}
data <- raw_data %>%
mutate(distribution = as.character(distribution),
distribution = factor(distribution, levels = c("c(5, 1, 0)", "c(2, 2, 2)")))
data
data <- raw_data %>%
mutate(distribution = as.character(distribution),
distribution = factor(distribution, levels = c("c(5, 1, 0)", "c(2, 2, 2)")),
workerIp = str_sub(workerIp,5,19))
data
data <- raw_data %>%
mutate(distribution = as.character(distribution),
distribution = factor(distribution, levels = c("c(5, 1, 0)", "c(2, 2, 2)")),
workerIp = str_sub(workerIp,11,19))
data
data$workerIp
data <- raw_data %>%
mutate(distribution = as.character(distribution),
distribution = factor(distribution, levels = c("c(5, 1, 0)", "c(2, 2, 2)")),
workerIp = str_sub(workerIp,11,19))
data <- raw_data %>%
mutate(distribution = as.character(distribution),
distribution = factor(distribution, levels = c("c(5, 1, 0)", "c(2, 2, 2)")),
workerIp = str_sub(workerIp,14,19))
data$workerIp
data <- raw_data %>%
mutate(distribution = as.character(distribution),
distribution = factor(distribution, levels = c("c(5, 1, 0)", "c(2, 2, 2)")),
workerIp = str_sub(workerIp,13,19))
t
data <- raw_data %>%
mutate(distribution = as.character(distribution),
distribution = factor(distribution, levels = c("c(5, 1, 0)", "c(2, 2, 2)")),
workerIp = str_sub(workerIp,13,19))
data$workerIp
data <- raw_data %>%
mutate(distribution = as.character(distribution),
distribution = factor(distribution, levels = c("c(5, 1, 0)", "c(2, 2, 2)")),
workerIp = str_sub(workerIp,12,19))
data$workerIp
data <- raw_data %>%
mutate(distribution = as.character(distribution),
distribution = factor(distribution, levels = c("c(5, 1, 0)", "c(2, 2, 2)")),
workerIp = str_sub(workerIp,12,23))
data$workerIp
data <- raw_data %>%
mutate(distribution = as.character(distribution),
distribution = factor(distribution, levels = c("c(5, 1, 0)", "c(2, 2, 2)")),
workerIp = str_sub(workerIp,12,24))
data$workerIp
data <- raw_data %>%
mutate(distribution = as.character(distribution),
distribution = factor(distribution, levels = c("c(5, 1, 0)", "c(2, 2, 2)")),
workerIp = str_sub(workerIp,12,27))
data$workerIp
files <- dir("../../recency_raw_data/sandbox-results")
raw_data <- data_frame()
for (f in files) {
jf <- paste("../../recency_raw_data/sandbox-results/",f,sep="")
jd <- fromJSON(paste(readLines(jf), collapse=""))
id <- as_data_frame(jd$answers$data$data) %>%
mutate(workerid = jd$WorkerId)
raw_data <- bind_rows(raw_data, id)
}
data <- raw_data %>%
mutate(distribution = as.character(distribution),
distribution = factor(distribution, levels = c("c(5, 1, 0)", "c(2, 2, 2)")))
data$workerIp
files <- dir("../../recency_raw_data/sandbox-results")
raw_data <- data_frame()
for (f in files) {
jf <- paste("../../recency_raw_data/sandbox-results/",f,sep="")
jd <- fromJSON(paste(readLines(jf), collapse=""))
id <- as_data_frame(jd$answers$data$data) %>%
mutate(workerid = jd$WorkerId)
raw_data <- bind_rows(raw_data, id)
}
data <- raw_data %>%
mutate(distribution = as.character(distribution),
distribution = factor(distribution, levels = c("c(5, 1, 0)", "c(2, 2, 2)")))
data$workerIp
jf <- paste("../../recency_raw_data/production-results/",f,sep="")
jd <- fromJSON(paste(readLines(jf), collapse=""))
files <- dir("../../recency_raw_data/production-results")
raw_data <- data_frame()
for (f in files) {
jf <- paste("../../recency_raw_data/production-results/",f,sep="")
jd <- fromJSON(paste(readLines(jf), collapse=""))
id <- as_data_frame(jd$answers$data$data) %>%
mutate(workerid = jd$WorkerId)
raw_data <- bind_rows(raw_data, id)
}
data <- raw_data %>%
mutate(distribution = as.character(distribution),
distribution = factor(distribution, levels = c("c(5, 1, 0)", "c(2, 2, 2)")))
data$workerIp
data
data <- raw_data %>%
mutate(distribution = as.character(distribution),
distribution = factor(distribution, levels = c("c(5, 1, 0)", "c(2, 2, 2)")))
data$workerIp
files <- dir("../../recency_raw_data/production-results")
raw_data <- data_frame()
for (f in files) {
jf <- paste("../../recency_raw_data/production-results/",f,sep="")
jd <- fromJSON(paste(readLines(jf), collapse=""))
id <- as_data_frame(jd$answers$data$data) %>%
mutate(workerid = jd$WorkerId)
raw_data <- bind_rows(raw_data, id)
}
raw_data
data <- raw_data %>%
mutate(distribution = as.character(distribution),
distribution = factor(distribution, levels = c("c(5, 1, 0)", "c(2, 2, 2)")))
files <- dir("../../recency_raw_data/production-results")
raw_data <- data_frame()
for (f in files) {
jf <- paste("../../recency_raw_data/production-results/",f,sep="")
jd <- fromJSON(paste(readLines(jf), collapse=""))
id <- as_data_frame(jd$answers$data$data) %>%
mutate(workerid = jd$WorkerId)
raw_data <- bind_rows(raw_data, id)
}
data <- raw_data %>%
mutate(distribution = as.character(distribution),
distribution = factor(distribution, levels = c("c(5, 1, 0)", "c(2, 2, 2)")))
data$workerIp
data
raw_data <- data_frame()
for (f in files) {
jf <- paste("../../recency_raw_data/production-results/",f,sep="")
jd <- fromJSON(paste(readLines(jf), collapse=""))
id <- as_data_frame(jd$answers$data$data) %>%
mutate(workerid = jd$WorkerId)
raw_data <- bind_rows(raw_data, id)
}
data <- raw_data %>%
mutate(distribution = as.character(distribution),
distribution = factor(distribution, levels = c("c(5, 1, 0)", "c(2, 2, 2)")))
data
data$workerIp
data
data %>%
filter(phase == 'training') %>%
group_by(workerid) %>%
summarise(correct = mean(correct_item))
drop <- data %>%
filter(phase == 'training') %>%
group_by(workerid) %>%
summarise(correct = mean(correct_item)) %>%
filter(correct < 0.83) %>%
pull(workerid)
data <- data %>%
filter(!workerid %in% drop)
data
data %>%
filter(phase == 'training') %>%
group_by(workerid) %>%
summarise(correct = mean(correct_item))
drop
data %>%
filter(phase == 'training') %>%
group_by(workerid) %>%
summarise(correct = mean(correct_item))
drop <- data %>%
filter(phase == 'training') %>%
group_by(workerid) %>%
summarise(correct = mean(correct_item)) %>%
filter(correct < 0.83) %>%
pull(workerid)
data <- data %>%
filter(!workerid %in% drop)
plot1 <- data %>%
filter(phase == 'test') %>%
group_by(distribution, workerid) %>%
summarise(correct = mean(correct_target1),
correct2 = mean(correct_target2),
correct3 = mean(correct_target3)) %>%
gather(item, prop_correct, -distribution, -workerid) %>%
group_by(distribution, item) %>%
multi_boot_standard(col = "prop_correct")
ggplot(plot1,
aes(x = item, y=mean, fill=item)) +
geom_bar(stat='identity') +
geom_linerange(aes(ymin = ci_lower, ymax = ci_upper)) +
scale_fill_solarized(name = "Chosen item",
breaks = c("correct", "correct2", "correct3"),
labels = c("most frequent", "second most frequent", "least frequent"))+
facet_grid(~distribution,
labeller = as_labeller(c(`c(5, 1, 0)` = "Distribution\n(5-1-0)", `c(4, 2, 0)` = "Distribution\n(4-2-0)", `c(2, 2, 2)` = "Distribution\n(2-2-2)", preference = "preference", statistical = "statistical"))) +
geom_hline(yintercept = 1/3, lty=2) +
ylim(0, 1) +
theme_few() +
theme(axis.text.x = element_blank(), axis.ticks.x = element_blank()) +
labs(x="", y= "proportion chosen")
plot2 <- data %>%
filter(phase == "test", distribution != "c(6, 0, 0)") %>%
mutate(trackLast = ifelse(lastInputCat == target1, "yes", "no")) %>%
group_by (distribution, workerid) %>%
summarise (lastInput = mean(same_lastInput),
n = n()) %>%
multi_boot_standard(col = "lastInput")
plot2 <- data %>%
filter(phase == "test", distribution != "c(6, 0, 0)") %>%
mutate(trackLast = ifelse(lastInputCat == target1, "yes", "no")) %>%
group_by (distribution, workerid) %>%
summarise (lastInput = mean(same_lastInput),
n = n()) %>%
multi_boot_standard(col = "lastInput")
ggplot(plot2,
aes(x = distribution, y = mean, fill = distribution)) +
geom_bar(stat='identity', width = 0.3) +
geom_linerange(aes(ymin = ci_lower, ymax = ci_upper)) +
geom_hline(yintercept = 1/3, lty=2) +
ylim(0, 1) +
theme_few()
plot1 <- data %>%
filter(phase == 'test') %>%
group_by(distribution, workerid) %>%
summarise(correct = mean(correct_target1),
correct2 = mean(correct_target2),
correct3 = mean(correct_target3)) %>%
gather(item, prop_correct, -distribution, -workerid) %>%
group_by(distribution, item) %>%
multi_boot_standard(col = "prop_correct")
ggplot(plot1,
aes(x = item, y=mean, fill=item)) +
geom_bar(stat='identity') +
geom_linerange(aes(ymin = ci_lower, ymax = ci_upper)) +
scale_fill_solarized(name = "Chosen item",
breaks = c("correct", "correct2", "correct3"),
labels = c("most frequent", "second most frequent", "least frequent"))+
facet_grid(~distribution,
labeller = as_labeller(c(`c(5, 1, 0)` = "Distribution\n(5-1-0)", `c(4, 2, 0)` = "Distribution\n(4-2-0)", `c(2, 2, 2)` = "Distribution\n(2-2-2)", preference = "preference", statistical = "statistical"))) +
geom_hline(yintercept = 1/3, lty=2) +
ylim(0, 1) +
theme_few() +
theme(axis.text.x = element_blank(), axis.ticks.x = element_blank()) +
labs(x="", y= "proportion chosen")
plot1 <- data %>%
filter(phase == 'test') %>%
group_by(distribution, workerid, target1) %>%
summarise(correct = mean(correct_target1),
correct2 = mean(correct_target2),
correct3 = mean(correct_target3)) %>%
gather(item, prop_correct, -distribution, -workerid, -target1) %>%
group_by(distribution, item, target1) %>%
multi_boot_standard(col = "prop_correct")
ggplot(plot1,
aes(x = item, y=mean, fill=item)) +
geom_bar(stat='identity') +
geom_linerange(aes(ymin = ci_lower, ymax = ci_upper)) +
scale_fill_solarized(name = "Chosen item",
breaks = c("correct", "correct2", "correct3"),
labels = c("most frequent", "second most frequent", "least frequent"))+
facet_grid(target1~distribution) +
geom_hline(yintercept = 1/3, lty=2) +
ylim(0, 1) +
theme_few() +
theme(axis.text.x = element_blank(), axis.ticks.x = element_blank()) +
labs(x="", y= "proportion chosen")
plot2 <- data %>%
filter(phase == "test", distribution != "c(6, 0, 0)") %>%
mutate(trackLast = ifelse(lastInputCat == target1, "yes", "no")) %>%
group_by (distribution, workerid) %>%
summarise (lastInput = mean(same_lastInput),
n = n()) %>%
multi_boot_standard(col = "lastInput")
plot2 <- data %>%
filter(phase == "test", distribution != "c(6, 0, 0)") %>%
mutate(trackLast = ifelse(lastInputCat == target1, "yes", "no")) %>%
group_by (distribution, workerid) %>%
summarise (lastInput = mean(same_lastInput),
n = n()) %>%
multi_boot_standard(col = "lastInput")
ggplot(plot2,
aes(x = distribution, y = mean, fill = distribution)) +
geom_bar(stat='identity', width = 0.3) +
geom_linerange(aes(ymin = ci_lower, ymax = ci_upper)) +
geom_hline(yintercept = 1/3, lty=2) +
ylim(0, 1) +
theme_few()
files <- dir("../../recency_raw_data/production-results")
raw_data <- data_frame()
for (f in files) {
jf <- paste("../../recency_raw_data/production-results/",f,sep="")
jd <- fromJSON(paste(readLines(jf), collapse=""))
id <- as_data_frame(jd$answers$data$data) %>%
mutate(workerid = jd$WorkerId)
raw_data <- bind_rows(raw_data, id)
}
data <- raw_data %>%
mutate(distribution = as.character(distribution),
distribution = factor(distribution, levels = c("c(5, 1, 0)", "c(2, 2, 2)")))
data$workerIp
`{r sanity checks}
da
data %>%
filter(phase == 'training') %>%
group_by(workerid) %>%
summarise(correct = mean(correct_item))
data
data %>%
filter(phase == 'training') %>%
group_by(workerid) %>%
summarise(correct = mean(correct_item))
drop <- data %>%
filter(phase == 'training') %>%
group_by(workerid) %>%
summarise(correct = mean(correct_item)) %>%
filter(correct < 0.83) %>%
pull(workerid)
data
data %>%
filter(phase == 'training') %>%
group_by(workerid) %>%
summarise(correct = mean(correct_item))
data
data %>%
filter(phase == 'training') %>%
group_by(workerid) %>%
summarise(correct = mean(correct_item))
data <- data %>%
filter(!workerid %in% drop)
data
data
files <- dir("../../recency_raw_data/production-results")
raw_data <- data_frame()
for (f in files) {
jf <- paste("../../recency_raw_data/production-results/",f,sep="")
jd <- fromJSON(paste(readLines(jf), collapse=""))
id <- as_data_frame(jd$answers$data$data) %>%
mutate(workerid = jd$WorkerId)
raw_data <- bind_rows(raw_data, id)
}
data <- raw_data %>%
mutate(distribution = as.character(distribution),
distribution = factor(distribution, levels = c("c(5, 1, 0)", "c(2, 2, 2)")))
data$workerIp
data
